package test;

import static org.junit.Assert.assertTrue;

import java.util.Date;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertNull;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import java.io.ByteArrayOutputStream;
import java.io.PrintStream;

import com.library.management.Book;
import com.library.management.Library;
import com.library.management.Patron;



class LibraryTest {
	private Library library;

	 @BeforeEach
	    public void setUp() {
	        library = new Library();
	    }
	 
	 @Test
	 public void TestAddBook() {
		Book b1=new Book("1235456", "William Kelly", true, "Lavender Secrets", "Fiction");
		library.addBook(b1);
		assertTrue("Book was should be added successfully",library.getBooks().contains(b1));
	 }
	 @Test
	 public void TestAddExistingBook() {
		 Book b1=new Book("1235456", "William Kelly", true, "Lavender Secrets", "Fiction");
		 Book b2=new Book("1235456", "William Kelly", true, "Lavender Secrets", "Fiction");
		 library.addBook(b1);
		 library.addBook(b2);
		 assertTrue("Book already exists", !library.getBooks().contains(b2));
	 }
	 
	 @Test
	 public void TestRemoveBook() {
		 Book b1=new Book("1235456", "William Kelly", true, "Lavender Secrets", "Fiction");
		library.addBook(b1);
		boolean isRemoved=library.removeBook("1235456");
		assertTrue("Book has to should be removed successfully",isRemoved);
		assertFalse("Book should no longer be in library",library.getBooks().contains(b1));
	 }
	 
	 @Test
	 public void TestRemoveBookThatsNotAdded() {
		 Book b2=new Book("987654321", "Sally Kelly", true, "Jasmine Power Secrets", "Fiction");
		 boolean IsRemoved=library.removeBook("987654321");
		 assertFalse("Book should not be removed if it's not added",IsRemoved);
	 }
	 
	 @Test
	 public void testRegisterPatron() {
		Patron.StudentPatron student=new Patron.StudentPatron("John Leandri", "leanjohn@yahoo.com", "1234569870", "S1234A");
		library.registerPatron(student);
		assertTrue("Student patron should be registered successfully", library.getPatrons().contains(student));
		
		Patron.FacultyPatron staff=new Patron.FacultyPatron("Jenny Synder", "jennysynder@yahoo.com", "9876543210", "English");
		library.registerPatron(staff);
		assertTrue("Faculty patron should be registered successfully", library.getPatrons().contains(staff));
	 }
	 @Test
	 public void testCheckoutBook() {
	        Book book = new Book("1234567890", "Author", true, "Title", "Genre");
	        library.addBook(book);
	        Patron patron = new Patron("John Doe", "john@example.com", "1234567890");
	        library.registerPatron(patron);
	        Date checkoutDate = new Date();
	        library.checkoutBook("1234567890", patron.getID(), checkoutDate);
	        assertFalse("Book should be checked out", book.isAvailable());
	        library.checkoutBook("1234567890", patron.getID(), new Date());
	        assertFalse("Book should still be checked out", book.isAvailable());
	        library.checkoutBook("9876543210", patron.getID(), new Date());
	        library.checkoutBook("1234567890", 999, new Date());
	    }
	 @Test
	    public void testReturnBook() {
	        Book book = new Book("1234567890", "Author", false, "Title", "Genre");
	        library.addBook(book);
	        library.returnBook("1234567890");
	        assertTrue("Book should be available", book.isAvailable());
	        library.returnBook("9876543210");
	    }
	 
	 @Test
	    public void testFindBookByISBN() {
	        Book book = new Book("1234567890", "Vianka Jeorge", true, "Lavenders", "Non-fiction");
	        library.addBook(book);
	        Book foundBook = library.findBookByISBN("1234567890");
	        assertNotNull(foundBook);
	        assertEquals("1234567890", foundBook.getISBN());
	        Book nonExistingBook = library.findBookByISBN("0987654321");
	        assertNull(nonExistingBook);
	 	
}
	 @Test
	 public void testFindPatronID() {
		 Patron studentPatron = new Patron.StudentPatron("John Doe", "john@example.com", "1234567890", "123ABC");
	        library.registerPatron(studentPatron);
	        Patron foundStudentPatron = library.findPatronByID(studentPatron.getID());
	        assertNotNull(foundStudentPatron);
	        assertEquals(studentPatron.getID(), foundStudentPatron.getID());
	        Patron nonExistingPatron = library.findPatronByID(9999); // Assuming 9999 is not an existing ID
	        assertNull(nonExistingPatron);
	 }
	 
	 @Test
	 public void testPrintAllBooks() {
	        Library library = new Library();
	        Book book1 = new Book("1234567890", "Charlie Puth", true, "Charlie Puth Autobioography", "Non-Fiction");
	        Book book2 = new Book("0987654321", "Sally Tillers", true, "How to Sing", "General");
	        library.addBook(book1);
	        library.addBook(book2);
	        ByteArrayOutputStream outContent = new ByteArrayOutputStream();
	        System.setOut(new PrintStream(outContent));
	        library.printAllBooks();
	        String expectedOutput = "Title: Charlie Puth Autobioography, Author: Charlie Puth, ISBN: 1234567890, Genre: Non-Fiction, Available: Yes\n" +
	        
	                                "Title: How to Sing, Author: Sally Tillers, ISBN: 0987654321, Genre: General, Available: Yes\n";
	        
	        assertEquals(expectedOutput, outContent.toString());
	        System.setOut(System.out);
	    }
	 

}